import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.File;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;


public class PenTest {
    // сколько чернила в ручке
    private int _inkContainerValue = 1000;
    // размер букв, которые пишутся ручкой
    private double _sizeLetter = 1.0;
    // цвет ручки
    private String _color = "BLUE";

    @Test
    public void testIsWorkFalseZero() {
        Pen pen = new Pen(0);
        Assert.assertEquals((Boolean) false, pen.isWork(), "Проверка отстутствия чернил при передаче в конструкторе  inkContainerValue==0");
    }

    @Test
    public void testIsWorkTrue() {
        Pen pen = new Pen(100);
        Assert.assertEquals((Boolean) true, pen.isWork(), "Проверка наличия чернил при передаче в конструкторе inkContainerValue > 0");
    }

    @Test
    public void testIsWorkFalseNegative() {
        Pen pen = new Pen(-100);
        Assert.assertEquals((Boolean) false, pen.isWork(), "Проверка  чернил при   inkContainerValue < 0 ");
    }


    @DataProvider
    public Object[][] createData1() {
        return new Object[][]{
                {"testword", new Integer(50), "testword"},//чернила достаточно, размер по умолчанию
                {"testword2", new Integer(5), "testw"},//чернила недостаточно, размер по умолчанию
                {"testword2", new Integer(0), ""},//чернила 0, размер по умолчанию
                {"testword2", new Integer(-10), "testword2"},//чернила -10, размер по умолчанию - ожидаем знаечние по умолчанию количества чернил
        };
    }

    @Test(dataProvider = "createData1")
    public void testWrite(String word, Integer inkContainerValue, String expected) {
        Pen pen = new Pen(inkContainerValue);
        String test = pen.write(word);
        Assert.assertEquals(test, expected);
    }


    @DataProvider
    public Object[][] createData2() {
        return new Object[][]{
                {"testword", new Integer(50), 2.0, "testword"},//чернила достаточно, размер 2.0
                {"testword2", new Integer(5), 2.0, "te"},//чернила недостаточно, размер 2.0
                {"testword2", new Integer(2), 0.5, "test"},//чернила недостаточно, размер 0.5

        };
    }

    @Test(dataProvider = "createData2")
    public void testWriteCustomSize(String word, Integer inkContainerValue, double sizeLetter, String expected) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String test = pen.write(word);
        Assert.assertEquals(test, expected);
    }


    @DataProvider
    public Object[][] getColorData() {
        return new Object[][]{
                {"RED"},
                {"WHITE"}
        };
    }

    @Test(dataProvider = "getColorData")
    public void testColor(String expectedColor) {
        Pen pen = new Pen(_inkContainerValue, _sizeLetter, expectedColor);
        String color = pen.getColor();
        Assert.assertEquals(color, expectedColor);

    }

    @Test
    public void testWriteResidueInk() {
        String word = "abcde";
        int inkContainerValue = word.length() * 2;
        Pen pen = new Pen(inkContainerValue);
        pen.write(word);
        String actual = pen.write(word);
        Assert.assertEquals(word.length(), actual.length());
        Assert.assertEquals((Boolean) false, pen.isWork(), "Проверка остатка чернил после написания слова размер букв - дефолтный");
    }

    @Test(dataProvider = "getColorData")
    public void testDoSomethingElse(String color) {
        try {
            File file = new File("d:\\temp.txt"); //  создаем файл
            PrintStream ps = new PrintStream(file); // создаем поток вывода в файл
            PrintStream standardOut = System.out; // сохраняем стандартный поток вывода
            System.setOut(ps); // присваиваем файловый поток в качестве основного
            Pen pen = new Pen(_inkContainerValue, _sizeLetter, color);
            pen.doSomethingElse(); // вызываем метод
            Assert.assertEquals(Files.readAllLines(Paths.get(file.toURI())).get(0), color); // проверяем что результат в файле равен ожидаемому
            System.setOut(standardOut); // возвращаем метод в исходное состояние
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
